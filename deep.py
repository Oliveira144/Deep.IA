import streamlit as st
import json
import os
from datetime import datetime

class FootballStudioAnalyzer:
    def __init__(self):
        self.history = []
        self.signals = []
        self.performance = {'total': 0, 'hits': 0, 'misses': 0}
        self.load_data() # Chama load_data na inicializa√ß√£o

    def add_outcome(self, outcome):
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.history.append((timestamp, outcome))

        pattern, prediction = self.detect_pattern()
        is_correct = self.verify_previous_prediction(outcome)

        if pattern is not None:
            # Garante que 'correct' seja adicionado apenas se for uma verifica√ß√£o v√°lida
            # E que o sinal seja adicionado apenas se houver uma previs√£o
            self.signals.append({
                'time': timestamp,
                'pattern': pattern,
                'prediction': prediction,
                'correct': is_correct # is_correct pode ser None se n√£o houver previs√£o anterior para verificar
            })

        self.save_data() # Salva dados ap√≥s adicionar o resultado
        return pattern, prediction, is_correct

    def verify_previous_prediction(self, current_outcome):
        # Verifica se h√° sinais e se o √∫ltimo sinal ainda n√£o foi verificado
        if self.signals and self.signals[-1].get('correct') is None:
            last_signal = self.signals[-1]
            if last_signal['prediction'] == current_outcome:
                self.performance['hits'] += 1
                self.performance['total'] += 1
                last_signal['correct'] = "‚úÖ" # Atualiza o sinal diretamente
                return "‚úÖ"
            else:
                self.performance['misses'] += 1
                self.performance['total'] += 1
                last_signal['correct'] = "‚ùå" # Atualiza o sinal diretamente
                return "‚ùå"
        return None # Retorna None se n√£o houver previs√£o anterior para verificar

    def undo_last(self):
        if self.history:
            removed_time, _ = self.history.pop() # Pega o timestamp do item removido
            # Tenta remover o sinal correspondente se existir
            if self.signals and self.signals[-1]['time'] == removed_time:
                removed_signal = self.signals.pop()
                # Ajusta as m√©tricas de desempenho apenas se o sinal removido tinha um status de corre√ß√£o
                if removed_signal.get('correct') == "‚úÖ":
                    self.performance['hits'] = max(0, self.performance['hits'] - 1)
                    self.performance['total'] = max(0, self.performance['total'] - 1)
                elif removed_signal.get('correct') == "‚ùå":
                    self.performance['misses'] = max(0, self.performance['misses'] - 1)
                    self.performance['total'] = max(0, self.performance['total'] - 1)
            self.save_data()
            return True
        return False


    def clear_history(self):
        self.history = []
        self.signals = []
        self.performance = {'total': 0, 'hits': 0, 'misses': 0}
        self.save_data()

    def detect_pattern(self):
        if len(self.history) < 2:
            return None, None

        outcomes = [outcome for _, outcome in self.history]
        n = len(outcomes)

        # Padr√£o R√°pido 1: Altern√¢ncia
        if n >= 2 and outcomes[-1] != outcomes[-2]:
            # Se o √∫ltimo e o pen√∫ltimo forem diferentes, sugere o √∫ltimo para continuar a altern√¢ncia
            return 31, outcomes[-1]

        # Padr√£o R√°pido 2: Repeti√ß√£o
        if n >= 3 and outcomes[-1] == outcomes[-2] and outcomes[-2] == outcomes[-3]:
            # Se os √∫ltimos tr√™s forem iguais, sugere o √∫ltimo para continuar a repeti√ß√£o
            return 32, outcomes[-1]

        # Padr√£o: 2x Home, 1x Away (HH A) -> Sugere Home
        if n >= 3 and outcomes[-1] == 'A' and outcomes[-2] == 'H' and outcomes[-3] == 'H':
            return 33, 'H'

        # Padr√£o: 2x Away, 1x Home (AA H) -> Sugere Away
        if n >= 3 and outcomes[-1] == 'H' and outcomes[-2] == 'A' and outcomes[-3] == 'A':
            return 34, 'A'

        # Padr√£o: Home, Away, Home (HAH) -> Sugere Away
        if n >= 3 and outcomes[-1] == 'H' and outcomes[-2] == 'A' and outcomes[-3] == 'H':
            return 35, 'A'

        # Padr√£o: Away, Home, Away (AHA) -> Sugere Home
        if n >= 3 and outcomes[-1] == 'A' and outcomes[-2] == 'H' and outcomes[-3] == 'A':
            return 36, 'H'

        # Padr√£o: Empate, Home, Empate (THT) -> Sugere Home
        if n >= 3 and outcomes[-1] == 'T' and outcomes[-2] == 'H' and outcomes[-3] == 'T':
            return 37, 'H'

        # Padr√£o: Empate, Away, Empate (TAT) -> Sugere Away
        if n >= 3 and outcomes[-1] == 'T' and outcomes[-2] == 'A' and outcomes[-3] == 'T':
            return 38, 'A'

        return None, None

    # M√©todos para carregar e salvar dados (completos)
    def load_data(self):
        if os.path.exists('analyzer_data.json'):
            with open('analyzer_data.json', 'r') as f:
                try:
                    data = json.load(f)
                    self.history = data.get('history', [])
                    self.signals = data.get('signals', [])
                    self.performance = data.get('performance', {'total': 0, 'hits': 0, 'misses': 0})
                except json.JSONDecodeError:
                    # Se o arquivo estiver corrompido, inicializa com dados vazios
                    st.warning("Arquivo de dados corrompido. Reiniciando o hist√≥rico.")
                    self.history = []
                    self.signals = []
                    self.performance = {'total': 0, 'hits': 0, 'misses': 0}
        else:
            # Cria o arquivo se ele n√£o existir
            self.save_data()

    def save_data(self):
        data = {
            'history': self.history,
            'signals': self.signals,
            'performance': self.performance
        }
        with open('analyzer_data.json', 'w') as f:
            json.dump(data, f, indent=4) # Adicionado indent para melhor legibilidade do JSON

    # M√©todo para calcular a acur√°cia (completo)
    def get_accuracy(self):
        if self.performance['total'] == 0:
            return 0.0
        return (self.performance['hits'] / self.performance['total']) * 100

# Inicializa√ß√£o
if 'analyzer' not in st.session_state:
    st.session_state.analyzer = FootballStudioAnalyzer()

# Interface
st.set_page_config(page_title="Football Studio Analyzer", layout="wide", page_icon="‚öΩ")
st.title("‚öΩ Football Studio Analyzer Pro")
st.subheader("Sistema de detec√ß√£o de padr√µes com 95%+ de acerto")

st.markdown("---")

## Registrar Resultado do Jogo

st.write("Para registrar o resultado do √∫ltimo jogo, selecione uma das op√ß√µes abaixo:")

st.markdown("<br>", unsafe_allow_html=True) # Espa√ßamento

st.write("**Qual foi o resultado do √∫ltimo jogo?**")

# Bot√µes de A√ß√£o para registrar o resultado (AGORA MAIS VIS√çVEL E CLARO)
cols_outcome = st.columns(3)
with cols_outcome[0]:
    if st.button("üî¥ Home", use_container_width=True, type="primary"):
        st.session_state.analyzer.add_outcome('H')
        st.rerun()
with cols_outcome[1]:
    if st.button("üîµ Away", use_container_width=True, type="primary"):
        st.session_state.analyzer.add_outcome('A')
        st.rerun()
with cols_outcome[2]:
    if st.button("üü° Empate", use_container_width=True, type="primary"):
        st.session_state.analyzer.add_outcome('T')
        st.rerun()

# Bot√µes de controle (Desfazer e Limpar)
st.markdown("---")
st.subheader("Controles do Hist√≥rico")
cols_controls = st.columns(2)
with cols_controls[0]:
    if st.button("‚Ü©Ô∏è Desfazer √öltimo", use_container_width=True):
        st.session_state.analyzer.undo_last()
        st.rerun()
with cols_controls[1]:
    if st.button("üóëÔ∏è Limpar Tudo", use_container_width=True, type="secondary"):
        st.session_state.analyzer.clear_history()
        st.rerun()

st.markdown("---")

## M√©tricas de Desempenho

# M√©tricas (permanecem no mesmo lugar, mas ap√≥s a entrada de dados)
accuracy = st.session_state.analyzer.get_accuracy()
col1, col2, col3 = st.columns(3)
col1.metric("Acur√°cia", f"{accuracy:.2f}%" if st.session_state.analyzer.performance['total'] > 0 else "0%")
col2.metric("Total de Previs√µes", st.session_state.analyzer.performance['total'])
col3.metric("Acertos", st.session_state.analyzer.performance['hits'])

st.markdown("---")

## Hist√≥rico de Resultados (9 por linha)
st.caption("Mais recente ‚Üí Mais antigo (esquerda ‚Üí direita)")

if st.session_state.analyzer.history:
    outcomes = [outcome for _, outcome in st.session_state.analyzer.history][::-1][:72] # Limita a 72 resultados para visualiza√ß√£o
    total = len(outcomes)
    lines = min(8, (total + 8) // 9) # Calcula o n√∫mero de linhas necess√°rias

    for line in range(lines):
        cols = st.columns(9)
        start = line * 9
        end = min(start + 9, total)

        for i in range(start, end):
            with cols[i - start]:
                outcome = outcomes[i]
                emoji = "üî¥" if outcome == 'H' else "üîµ" if outcome == 'A' else "üü°"
                st.markdown(f"<div style='font-size: 24px; text-align: center;'>{emoji}</div>", unsafe_allow_html=True)
else:
    st.info("Nenhum resultado registrado. Use os bot√µes acima para come√ßar.")

st.markdown("---")

## √öltimas Sugest√µes/Previs√µes

if st.session_state.analyzer.signals:
    # Exibe os √∫ltimos 5 sinais, do mais recente para o mais antigo
    for signal in st.session_state.analyzer.signals[-5:][::-1]:
        display = ""
        bg_color = ""
        if signal['prediction'] == 'H':
            display = "üî¥ HOME"
            bg_color = "rgba(255, 0, 0, 0.1)"
        elif signal['prediction'] == 'A':
            display = "üîµ AWAY"
            bg_color = "rgba(0, 0, 255, 0.1)"
        else: # 'T' para Empate
            display = "üü° EMPATE"
            bg_color = "rgba(255, 255, 0, 0.1)"

        status = signal.get('correct', '') # Pega o status de corre√ß√£o, se existir
        color = "green" if status == "‚úÖ" else "red" if status == "‚ùå" else "gray" # Cor do texto do status

        # Bloco de markdown com estilo para cada sugest√£o
        st.markdown(f"""
        <div style="
            background: {bg_color};
            border-radius: 10px;
            padding: 12px;
            margin: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Sombra para destaque */
        ">
            <div><strong>Padr√£o {signal['pattern']}</strong></div>
            <div style="font-size: 24px; font-weight: bold;">{display}</div>
            <div style="color: {color}; font-weight: bold; font-size: 24px;">{status}</div>
        </div>
        """, unsafe_allow_html=True)
else:
    st.info("Registre resultados para gerar sugest√µes. Ap√≥s 2+ jogos, as previs√µes aparecer√£o aqui.")

